<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ACM笔记</title>
    <url>/2021/05/08/ACM%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="点与直线"><a href="#点与直线" class="headerlink" title="点与直线"></a>点与直线</h1><hr>
<h3 id="点积与叉积"><a href="#点积与叉积" class="headerlink" title="点积与叉积"></a>点积与叉积</h3><p>O （x0，y0） A（x1,x2) B(y1,y2)</p>
<p>xa=x1-x0;</p>
<p>ya=y1-y0;</p>
<p>xb=x2-x0;</p>
<p>yb=y2-y0;</p>
<p>OA与OB的点积<br>xa<em>xb+ya</em>yb</p>
<p><strong>点积为零时向量垂直。</strong></p>
<p>OA与OB的叉积为<br>xa<em>xb-ya</em>yb;</p>
<p><strong>叉积为0时O A B 共线。</strong></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>TCP协议</title>
    <url>/2021/06/01/TCP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><hr>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>http是一种超文本传输协议。</p>
<p>客户端：web浏览器实现了http的客户端。<br>服务器（web服务器）：存储了能通过URL寻址来查找的web对象。</p>
<p>web界面的构成：由一个HTML的基本文件（也是对象）+其中的多条URL构成（可寻址成对象例如图片等）。</p>
<p><a href="http://www.github.com/xxx/xxx">http://www.github.com/xxx/xxx</a></p>
<p><a href="http://www.github.com为主机名/">www.github.com为主机名</a></p>
<p>/xxx/xxx为路径名</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>bfs代码分析小结</title>
    <url>/2021/04/04/bfs%E5%8A%A0%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<h1 id="bfs非递归"><a href="#bfs非递归" class="headerlink" title="bfs非递归"></a><strong>bfs非递归</strong></h1><hr>
<p><em><strong>题目</strong></em></p>
<p>下图给出了一个迷宫的平面图，其中标记为 1 的为障碍，标记为 0 的为可<br>以通行的地方。</p>
<p>010000</p>
<p>000100</p>
<p>001001</p>
<p>110000</p>
<p>迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这<br>个它的上、下、左、右四个方向之一。<br>对于上面的迷宫，从入口开始，可以按DRRURRDDDR 的顺序通过迷宫，<br>一共 10 步。其中 D、U、L、R 分别表示向下、向上、向左、向右走。<br>对于下面这个更复杂的迷宫（30 行 50 列），请找出一种通过迷宫的方式，<br>其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。<br>请注意在字典序中D&lt;L&lt;R&lt;U。</p>
<p><em><strong>代码</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;cmath&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;queue&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">30</span>,m=<span class="number">50</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">coor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;<span class="comment">//坐标</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">POS</span>//<span class="title">pos</span>偏移值</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">&#125;pos[<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> par[<span class="number">55</span>][<span class="number">55</span>];<span class="comment">//路径数组储存路径用于打印</span></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">55</span>][<span class="number">55</span>];<span class="comment">//判断路障的标记数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> dir[<span class="number">4</span>]=&#123;<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;U&#x27;</span>&#125;;<span class="comment">//方向数组用于打印</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//打印函数从终点回溯</span></span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">0</span> &amp;&amp; y==<span class="number">0</span>) </span><br><span class="line">	<span class="keyword">return</span>;<span class="comment">//到达起点开始回溯</span></span><br><span class="line">	<span class="built_in">dfs</span>(x-pos[par[x][y]].x,y-pos[par[x][y]].y);<span class="comment">//通过路径数组回溯</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, dir[par[x][y]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">     coor temp;<span class="comment">//中间坐标变量方便预览下一步</span></span><br><span class="line">	 queue&lt;coor&gt; q;<span class="comment">//创建容器双头可读取后方push的栈</span></span><br><span class="line">	 q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);<span class="comment">//起点</span></span><br><span class="line">	 vis[<span class="number">0</span>][<span class="number">0</span>]=<span class="literal">true</span>;<span class="comment">//起点标记路障</span></span><br><span class="line">	 <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		 coor p=q.<span class="built_in">front</span>();<span class="comment">//现在坐标</span></span><br><span class="line">		 q.<span class="built_in">pop</span>();<span class="comment">//弹出</span></span><br><span class="line">		 <span class="keyword">if</span>(p.x==n&amp;&amp;p.y==m)<span class="comment">//判断终点</span></span><br><span class="line">		 <span class="keyword">return</span>;</span><br><span class="line">		 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//4个方向的以此入栈</span></span><br><span class="line">		 &#123;  </span><br><span class="line">			temp.x=p.x+pos[i].x;<span class="comment">//现在坐标加偏移值</span></span><br><span class="line">			temp.y=p.y+pos[i].y;</span><br><span class="line">			<span class="keyword">if</span>(temp.x&lt;<span class="number">0</span>||temp.x&gt;=n||temp.y&lt;<span class="number">0</span>||temp.y&gt;=m||vis[temp.x][temp.y])</span><br><span class="line">			    <span class="keyword">continue</span>;<span class="comment">//判断下一步的可行性不可行就下一个方向</span></span><br><span class="line">			 vis[temp.x][temp.y]=<span class="literal">true</span>;<span class="comment">//可行此处标记路障</span></span><br><span class="line">			 q.<span class="built_in">push</span>(temp);<span class="comment">//入栈</span></span><br><span class="line">			 par[temp.x][temp.y]=i;<span class="comment">//打印数组记录路径</span></span><br><span class="line">		 &#125;</span><br><span class="line">		 </span><br><span class="line">	 &#125;</span><br><span class="line"></span><br><span class="line">	  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> x;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span>  i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"> &#123;</span><br><span class="line">	 <span class="keyword">for</span> (<span class="keyword">int</span>  j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">	 &#123;</span><br><span class="line">		 x=<span class="built_in">getchar</span>()-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//读入数据</span></span><br><span class="line">		 <span class="keyword">if</span>(x==<span class="number">1</span>)<span class="comment">//判断是不是障碍</span></span><br><span class="line">		 vis[i][j]=<span class="literal">true</span>;<span class="comment">//路障标记数组标记</span></span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="built_in">getchar</span>();<span class="comment">//回车清理</span></span><br><span class="line"> &#125;</span><br><span class="line">  <span class="built_in">bfs</span>();</span><br><span class="line">  <span class="built_in">dfs</span>(n<span class="number">-1</span>,m<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a><strong>代码分析</strong></h2><hr>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>代码重要部分分为三大步</p>
<p>第一步：对整个迷宫进行bfs。</p>
<p>第二步: 对整个迷宫进行回溯找到路径。</p>
<hr>
<h3 id="第一步bfs"><a href="#第一步bfs" class="headerlink" title="第一步bfs"></a>第一步bfs</h3><p>非递归的bfs利用了队列queue，通过对队列的前端进行依次pop来进行依次的遍历，把遍历的结果放入队列的后端。这样就使迷宫进行了分层级（按照步数）相同步数能走到的是一层，次层遍历结束后再进行下一层的遍历。最终找到终点。</p>
<hr>
<h2 id="第二步回溯"><a href="#第二步回溯" class="headerlink" title="第二步回溯"></a>第二步回溯</h2><p>回溯的实现是依托标记数组（par）来完成，数组标记了每个格子的来历。<br>也就是通过每个格子上的标记（1，2，3，4）来查找方向<code>char dir[4]=&#123;&#39;D&#39;,&#39;L&#39;,&#39;R&#39;,&#39;U&#39;&#125;;</code>,这样每个格子上的标记就实现了对上一个格子的定位。最后通过终点的格子标记就可以回溯出路线。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>crawler</title>
    <url>/2021/08/14/crawler/</url>
    <content><![CDATA[<h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><hr>
<p>用于下载网页可以使用代理点更改headers来跳过爬虫检测<br>用提供的URL来进行网页的下载</p>
<h2 id="beautifulsoup4模块"><a href="#beautifulsoup4模块" class="headerlink" title="beautifulsoup4模块"></a>beautifulsoup4模块</h2><p>提供对离线网页的优化用于搜索和提取相关信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import bs4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def open_url(url):</span><br><span class="line">    headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit&#x2F;535.11 (KHTML, like Gecko) Chrome&#x2F;17.0.9&quot;&#125;</span><br><span class="line">    res &#x3D; requests.get(url, headers&#x3D;headers)</span><br><span class="line"></span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    res &#x3D; open_url(&quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250&quot;)</span><br><span class="line">    soup &#x3D; bs4.BeautifulSoup(res.text, &quot;html.parser&quot;)&#x2F;&#x2F;进行转码</span><br><span class="line">    second &#x3D; soup.find_all(&quot;div&quot;, class_&#x3D;&quot;hd&quot;)&#x2F;&#x2F;提取信息</span><br><span class="line">    for each in second:&#x2F;&#x2F;打印提取的结果</span><br><span class="line">        print(each.a.span.text)</span><br><span class="line"></span><br><span class="line">main()&#x2F;&#x2F;调用main函数开始程序</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>bfs树的遍历</title>
    <url>/2021/04/05/bfs%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="bfs树的遍历"><a href="#bfs树的遍历" class="headerlink" title="bfs树的遍历"></a>bfs树的遍历</h1><hr>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>【问题描述】<br>给定一棵包含 N 个节点的完全二叉树，树上每个节点都有一个权值，按从<br>上到下、从左到右的顺序依次是 A1, A2, · · · AN。<br>现在小明要把相同深度的节点的权值加在一起，他想知道哪个深度的节点<br>权值之和最大？如果有多个深度的权值和同为最大，请你输出其中最小的深度。</p>
<p>注：根的深度是 1。</p>
<p>【输入格式】</p>
<p>第一行包含一个整数 N。</p>
<p>第二行包含 N 个整数 A1, A2, · · · AN 。</p>
<p>【输出格式】</p>
<p>输出一个整数代表答案。</p>
<p>【样例输入】</p>
<p>7</p>
<p>1 6 5 4 3 2 1</p>
<hr>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;cmath&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;queue&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> sum2=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">int</span> j,i;</span><br><span class="line">	<span class="keyword">int</span> deep=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> deepmin=<span class="number">1</span>;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;n; )</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;<span class="built_in">pow</span>(<span class="number">2</span>,deep<span class="number">-1</span>); j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> m;</span><br><span class="line">			cin&gt;&gt;m;</span><br><span class="line">			sum+=m;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sum2&lt;sum)&#123;</span><br><span class="line">			deepmin=deep;</span><br><span class="line">			sum2=sum;</span><br><span class="line">		&#125;</span><br><span class="line">		i+=<span class="built_in">pow</span>(<span class="number">2</span>,deep<span class="number">-1</span>);</span><br><span class="line">		sum=<span class="number">0</span>;</span><br><span class="line">		deep++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;deepmin&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>给的数据正好是bfs队列的顺序只需要一个for循环就可达到队列的效果，再在里面加一个for用于读取每一层的数据，再实时比较即可。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>dfs递归版本-过河卒问题</title>
    <url>/2021/04/14/dfs%E9%80%92%E5%BD%92%E7%89%88%E6%9C%AC-%E8%BF%87%E6%B2%B3%E5%8D%92%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="dfs递归版本-过河卒问题"><a href="#dfs递归版本-过河卒问题" class="headerlink" title="dfs递归版本-过河卒问题"></a>dfs递归版本-过河卒问题</h1><hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;cmath&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spot</span>&#123;</span></span><br><span class="line">   <span class="keyword">int</span> x;</span><br><span class="line">   <span class="keyword">int</span> y;</span><br><span class="line">&#125;;<span class="comment">//点坐标结构</span></span><br><span class="line"></span><br><span class="line">spot a[<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;<span class="comment">//偏移数组记录方向方便for循环</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> map[<span class="number">20</span>][<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//迷宫</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;<span class="comment">//记录路线数量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(spot temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">1</span>||map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">2</span>)</span><br><span class="line">             &#123;<span class="keyword">if</span>(map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">2</span>)</span><br><span class="line">             sum++;</span><br><span class="line">             <span class="keyword">continue</span>;&#125;</span><br><span class="line">             <span class="built_in">dfs</span>(&#123;temp.x+a[i].x,temp.y+a[i].y&#125;);</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="comment">//记录迷宫大小</span></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">     spot horse;</span><br><span class="line">     cin&gt;&gt;horse.x&gt;&gt;horse.y;</span><br><span class="line">     map[n][m]=<span class="number">2</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m+<span class="number">1</span>;i++)</span><br><span class="line">     map[n+<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;i++)</span><br><span class="line">     map[i][m+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">     map[horse.x][horse.y]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x+<span class="number">1</span>&lt;=<span class="number">100</span>&amp;&amp;horse.y<span class="number">-2</span>&gt;=<span class="number">0</span>)</span><br><span class="line">     map[horse.x+<span class="number">1</span>][horse.y<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x+<span class="number">2</span>&lt;=<span class="number">100</span>&amp;&amp;horse.y<span class="number">-1</span>&gt;=<span class="number">0</span>)</span><br><span class="line">     map[horse.x+<span class="number">2</span>][horse.y<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x+<span class="number">2</span>&lt;=<span class="number">100</span>&amp;&amp;horse.y+<span class="number">1</span>&lt;=<span class="number">100</span>)</span><br><span class="line">     map[horse.x+<span class="number">2</span>][horse.y+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x+<span class="number">1</span>&lt;=<span class="number">100</span>&amp;&amp;horse.y+<span class="number">2</span>&lt;=<span class="number">100</span>)</span><br><span class="line">     map[horse.x+<span class="number">1</span>][horse.y+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;horse.y+<span class="number">2</span>&lt;=<span class="number">100</span>)</span><br><span class="line">     map[horse.x<span class="number">-1</span>][horse.y+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x<span class="number">-2</span>&gt;=<span class="number">0</span>&amp;&amp;horse.y+<span class="number">1</span>&lt;=<span class="number">100</span>)</span><br><span class="line">     map[horse.x<span class="number">-2</span>][horse.y+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x<span class="number">-2</span>&gt;=<span class="number">0</span>&amp;&amp;horse.y<span class="number">-1</span>&gt;=<span class="number">0</span>)</span><br><span class="line">     map[horse.x<span class="number">-2</span>][horse.y<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;horse.y<span class="number">-2</span>&gt;=<span class="number">0</span>)</span><br><span class="line">     map[horse.x<span class="number">-1</span>][horse.y<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="comment">//初始化</span></span><br><span class="line">     </span><br><span class="line">     <span class="built_in">dfs</span>(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">     </span><br><span class="line">     cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p>主体为dfs函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(spot temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">1</span>||map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">2</span>)</span><br><span class="line">             &#123;<span class="keyword">if</span>(map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">2</span>)</span><br><span class="line">             sum++;</span><br><span class="line">             <span class="keyword">continue</span>;&#125;</span><br><span class="line">             <span class="built_in">dfs</span>(&#123;temp.x+a[i].x,temp.y+a[i].y&#125;);</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数形参就是当前的点，<br>之后for遍历所有方向。<br>不同点在<code> dfs(&#123;temp.x+a[i].x,temp.y+a[i].y&#125;);</code>一旦遇到合法的点就进去，而遍历完所有可能方向就会结束函数。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>fastsort</title>
    <url>/2021/04/06/fastsort/</url>
    <content><![CDATA[<h1 id="快速排序（递归）"><a href="#快速排序（递归）" class="headerlink" title="快速排序（递归）"></a>快速排序（递归）</h1><hr>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;cmath&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;queue&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">int</span> )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">			<span class="keyword">int</span> q=<span class="built_in">change</span>(left,right);</span><br><span class="line">			<span class="built_in">sort</span>(left,q<span class="number">-1</span>);</span><br><span class="line">			<span class="built_in">sort</span>(q+<span class="number">1</span>,right);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> temp=a[left];</span><br><span class="line">	  <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">	  <span class="keyword">while</span>(a[right]&gt;=temp&amp;&amp;left&lt;right) right--;</span><br><span class="line">	  a[left]=a[right];</span><br><span class="line">	  <span class="keyword">while</span>(a[left]&lt;=temp&amp;&amp;left&lt;right) left++;</span><br><span class="line">	  a[right]=a[left];</span><br><span class="line">	  &#125;</span><br><span class="line">       a[left]=temp;</span><br><span class="line">	   <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	<span class="built_in">sort</span>(<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>sort函数是用来进行分割和递归，change函数是用来执行比较和交换，并返回移动后的left。保证left右边所有数据比他小，左边所有数据比他大。<code>int q=change(left,right);</code>这个语句就是用来分割数组，将左右范围值带入，得到一个最左边元素所应该在的位置的下标。再在此下标的基础上分别进行他左边和右边范围的递归。</p>
<p>sort语句的递归的进口是左下标小于右下标，出口就是左下标大于等于右下标。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>dfs非递归版本(过河卒问题)</title>
    <url>/2021/04/14/dfs%E9%9D%9E%E9%80%92%E5%BD%92%E7%89%88%E6%9C%AC-%E8%BF%87%E6%B2%B3%E5%8D%92%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="dfs非递归版本-过河卒问题"><a href="#dfs非递归版本-过河卒问题" class="headerlink" title="dfs非递归版本(过河卒问题)"></a>dfs非递归版本(过河卒问题)</h1><hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;cmath&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spot</span>&#123;</span></span><br><span class="line">   <span class="keyword">int</span> x;</span><br><span class="line">   <span class="keyword">int</span> y;</span><br><span class="line">&#125;;<span class="comment">//点坐标结构</span></span><br><span class="line"></span><br><span class="line">spot a[<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;<span class="comment">//偏移数组记录方向方便for循环</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> map[<span class="number">100</span>][<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//迷宫</span></span><br><span class="line"></span><br><span class="line">stack&lt;spot&gt; s;<span class="comment">//栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;<span class="comment">//记录路线数量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="comment">//记录迷宫大小</span></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">     spot horse;</span><br><span class="line">     cin&gt;&gt;horse.x&gt;&gt;horse.y;</span><br><span class="line">     map[n][m]=<span class="number">2</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m+<span class="number">1</span>;i++)</span><br><span class="line">     map[n+<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;i++)</span><br><span class="line">     map[i][m+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">     map[horse.x][horse.y]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x+<span class="number">1</span>&lt;=<span class="number">100</span>&amp;&amp;horse.y<span class="number">-2</span>&gt;=<span class="number">0</span>)</span><br><span class="line">     map[horse.x+<span class="number">1</span>][horse.y<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x+<span class="number">2</span>&lt;=<span class="number">100</span>&amp;&amp;horse.y<span class="number">-1</span>&gt;=<span class="number">0</span>)</span><br><span class="line">     map[horse.x+<span class="number">2</span>][horse.y<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x+<span class="number">2</span>&lt;=<span class="number">100</span>&amp;&amp;horse.y+<span class="number">1</span>&lt;=<span class="number">100</span>)</span><br><span class="line">     map[horse.x+<span class="number">2</span>][horse.y+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x+<span class="number">1</span>&lt;=<span class="number">100</span>&amp;&amp;horse.y+<span class="number">2</span>&lt;=<span class="number">100</span>)</span><br><span class="line">     map[horse.x+<span class="number">1</span>][horse.y+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;horse.y+<span class="number">2</span>&lt;=<span class="number">100</span>)</span><br><span class="line">     map[horse.x<span class="number">-1</span>][horse.y+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x<span class="number">-2</span>&gt;=<span class="number">0</span>&amp;&amp;horse.y+<span class="number">1</span>&lt;=<span class="number">100</span>)</span><br><span class="line">     map[horse.x<span class="number">-2</span>][horse.y+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x<span class="number">-2</span>&gt;=<span class="number">0</span>&amp;&amp;horse.y<span class="number">-1</span>&gt;=<span class="number">0</span>)</span><br><span class="line">     map[horse.x<span class="number">-2</span>][horse.y<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(horse.x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;horse.y<span class="number">-2</span>&gt;=<span class="number">0</span>)</span><br><span class="line">     map[horse.x<span class="number">-1</span>][horse.y<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">     <span class="comment">//初始化</span></span><br><span class="line">     spot temp=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">     s.<span class="built_in">push</span>(temp);</span><br><span class="line">     <span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">     &#123;</span><br><span class="line">         temp=s.<span class="built_in">top</span>();</span><br><span class="line">         s.<span class="built_in">pop</span>();</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">1</span>||map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">2</span>)</span><br><span class="line">             &#123;<span class="keyword">if</span>(map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">2</span>)</span><br><span class="line">             sum++;</span><br><span class="line">             <span class="keyword">continue</span>;&#125;</span><br><span class="line">             s.<span class="built_in">push</span>(&#123;temp.y+a[i].y,temp.x+a[i].x&#125;);</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要内容在下面这一部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">spot temp=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">     s.<span class="built_in">push</span>(temp);</span><br><span class="line">     <span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">     &#123;</span><br><span class="line">         temp=s.<span class="built_in">top</span>();</span><br><span class="line">         s.<span class="built_in">pop</span>();</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">1</span>||map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">2</span>)</span><br><span class="line">             &#123;<span class="keyword">if</span>(map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">2</span>)</span><br><span class="line">             sum++;</span><br><span class="line">             <span class="keyword">continue</span>;&#125;</span><br><span class="line">             s.<span class="built_in">push</span>(&#123;temp.y+a[i].y,temp.x+a[i].x&#125;);</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<pre><code> 头两句是初始化栈方便进入while循环，之后的这两句
</code></pre>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">temp=s.<span class="built_in">top</span>();</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br></pre></td></tr></table></figure>
<p>实现的栈的出栈；</p>
<p>之后的 <code> for (int i = 0; i &lt; 2; i++)</code>遍历两个方向，右和下。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">1</span>||map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">2</span>)</span><br><span class="line">             &#123;<span class="keyword">if</span>(map[temp.y+a[i].y][temp.x+a[i].x]==<span class="number">2</span>)</span><br><span class="line">             sum++;</span><br><span class="line">        <span class="keyword">continue</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>这个双if外层是判断马和终点内层判断终点，sum++是到终点后要做的事情，不管终点和马都要continue。因为要遍历所有结果求路径。</p>
<p><code> s.push(&#123;temp.y+a[i].y,temp.x+a[i].x&#125;)</code></p>
<p>这句就是将合法的路径入栈。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>冒泡排序片段</title>
    <url>/2021/04/07/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%89%87%E6%AE%B5/</url>
    <content><![CDATA[<h1 id="冒泡排序片段"><a href="#冒泡排序片段" class="headerlink" title="冒泡排序片段"></a>冒泡排序片段</h1><hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>-i;j++)</span><br><span class="line">     <span class="keyword">if</span>(a[j]&lt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">		 <span class="keyword">int</span> temp;</span><br><span class="line">          temp=a[j];</span><br><span class="line">		  a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">		  a[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125; </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一个for是实现了每个数的遍历，第二个for实现了相邻数的比较。每次执行一次外层的for就会有一个数被排序完毕。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>前中后三序遍历二叉树的区别</title>
    <url>/2021/05/29/%E5%89%8D%E4%B8%AD%E5%90%8E%E4%B8%89%E5%BA%8F%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>#前中后三序遍历二叉树的区别<br>主要区别在与printf函数的位置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    TreeNode * left;</span><br><span class="line">    TreeNode * right;</span><br><span class="line">&#125;TreeNode;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_order</span><span class="params">(TreeNode * Node)</span><span class="comment">//前序遍历递归算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Node-&gt;data);<span class="comment">//在前面</span></span><br><span class="line">    <span class="built_in">pre_order</span>(Node-&gt;left);</span><br><span class="line">    <span class="built_in">pre_order</span>(Node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">middle_order</span><span class="params">(TreeNode *Node)</span><span class="comment">//中序遍历递归算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">middle_order</span>(Node-&gt;left);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Node-&gt;data);<span class="comment">//在中间</span></span><br><span class="line">    <span class="built_in">middle_order</span>(Node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">post_order</span><span class="params">(TreeNode *Node)</span><span class="comment">//后序遍历递归算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    <span class="built_in">post_order</span>(Node-&gt;left);</span><br><span class="line">    <span class="built_in">post_order</span>(Node-&gt;right);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Node-&gt;data);<span class="comment">//在最后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>基于c++和 opencv的人脸检测</title>
    <url>/2021/05/25/%E5%9F%BA%E4%BA%8Ec-%E5%92%8C-opencv%E7%9A%84%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h1 id="基于c-和-opencv的人脸检测"><a href="#基于c-和-opencv的人脸检测" class="headerlink" title="基于c++和 opencv的人脸检测"></a>基于c++和 opencv的人脸检测</h1><hr>
<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>cmake，vscode，MinGW64，OpenCV。<strong>记得配置环境变量</strong></p>
<p><a href="https://www.cnblogs.com/uestc-mm/p/12758110.html">具体配置指南</a></p>
<hr>
<h2 id="配置OpenCV"><a href="#配置OpenCV" class="headerlink" title="配置OpenCV"></a>配置OpenCV</h2><p>cd 到opencv文件夹 运行 </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">mkdir mingw_build</span><br></pre></td></tr></table></figure>
<p>检查目录下的文件<br>mingw_build，sources,build。缺少的新建即可</p>
<hr>
<h2 id="编写CMake"><a href="#编写CMake" class="headerlink" title="编写CMake"></a>编写CMake</h2><p>以管理员运行CMake，</p>
<p>sources路径填写OpenCV文件夹下的sources路径</p>
<p>bulid路径填写OpenCV文件夹下的mingw_build路径</p>
<p>填写完后点击Configure触发配置</p>
<p>generator选择MinGW Makefile,并选择Specify native compilers之后点击next</p>
<p>之后选择c和c++的编译器类型  路径例如F:\TDM-GCC-64\bin c选择gcc.exe<br>c++选择g++.exe 之后点击Finished开始配置相关文件</p>
<p><strong>注：检查Opencv源文件中的ffmpeg文件是否有文件没有手动下载添加，在编译之前，需要在MinGW64-bin文件夹中添加libmingwex-0.dll文件</strong></p>
<p>ENABLE_PRECONPILED_HEADERS        取消勾选</p>
<p> BUILD_opencv_ts                 取消勾选</p>
<p> WITH_CUDA                      取消勾选</p>
<p> 配置完基本选项之后即可点击Generate开始生成MinGW Makefile</p>
<hr>
<h2 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h2><p>cd到mingw_build下执行<code>mingw32-make</code>完成后执行<code>mingw32-make install</code></p>
<hr>
<h2 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h2><p>c_cpp_properties.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Win32&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;F:/opencv/opencv/mingw_build/install/include&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;defines&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;_DEBUG&quot;</span>,</span><br><span class="line">                <span class="string">&quot;UNICODE&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_UNICODE&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;windowsSdkVersion&quot;</span>: <span class="string">&quot;10.0.18362.0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span>: <span class="string">&quot;F://vs2019//VC//Tools//MSVC//14.28.29333//bin//Hostx64//x64//cl.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span>: <span class="string">&quot;c17&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span>: <span class="string">&quot;c++17&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span>: <span class="string">&quot;windows-msvc-x64&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>launch.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(gdb) Launch&quot;</span>, <span class="comment">// 配置名称，将会在启动配置的下拉菜单中显示</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>, <span class="comment">// 配置类型，这里只能为cppdbg</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>, <span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>, <span class="comment">// 将要进行调试的程序的路径</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [], <span class="comment">// 程序调试时传递给程序的命令行参数，一般设为空即可</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>, <span class="comment">// 设为true时程序将暂停在程序入口处，一般设置为false</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>, <span class="comment">// 调试程序时的工作目录，一般为$&#123;workspaceRoot&#125;即代码所在目录 workspaceRoot已被弃用，现改为workspaceFolder</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">true</span>, <span class="comment">// 调试时是否显示控制台窗口，一般设置为true显示控制台</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;F:/TDM-GCC-64/bin/gdb.exe&quot;</span>, <span class="comment">// miDebugger的路径，注意这里要与MinGw的路径对应</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;g++&quot;</span>, <span class="comment">// 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>tasks.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;g++&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;-g&quot;</span>,</span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-o&quot;</span>,</span><br><span class="line">        <span class="string">&quot;$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-IF:/opencv/opencv/mingw_build/install/include&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-IF:/opencv/opencv/mingw_build/install/include/opencv2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-LF:/opencv/opencv/mingw_build/install/x64/mingw/bin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-LF:/opencv/opencv/mingw_build/install/x64/mingw/lib&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_calib3d420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_core420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_dnn420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_features2d420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_flann420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_highgui420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_imgcodecs420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_imgproc420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_ml420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_objdetect420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_photo420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_stitching420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_video420&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-llibopencv_videoio420&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;problemMatcher&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fileLocation&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;relative&quot;</span>,</span><br><span class="line">            <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;regexp&quot;</span>: <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;file&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;line&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;column&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;severity&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;message&quot;</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;group&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;isDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\core\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/objdetect/objdetect.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\types_c.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line">string xmlPath=<span class="string">&quot;C:\\Users\\12238\\Desktop\\opencv\\haarcascade_frontalface_default.xml&quot;</span>;<span class="comment">//xml在F:\opencv\opencv\sources\data\haarcascades里复制或直接引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat a = cv::<span class="built_in">imread</span>(<span class="string">&quot;he.jpg&quot;</span>); </span><br><span class="line">    CascadeClassifier ccf;      <span class="comment">//创建脸部对象</span></span><br><span class="line">    ccf.<span class="built_in">load</span>(xmlPath);           <span class="comment">//导入opencv自带检测的文件</span></span><br><span class="line">    vector&lt;Rect&gt; faces;         </span><br><span class="line">    Mat gray;                       </span><br><span class="line">    <span class="built_in">cvtColor</span>(a,gray,CV_BGR2GRAY);</span><br><span class="line">    <span class="built_in">equalizeHist</span>(gray,gray);</span><br><span class="line">    ccf.<span class="built_in">detectMultiScale</span>(gray,faces,<span class="number">1.06</span>,<span class="number">10</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;123453&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(vector&lt;Rect&gt;::const_iterator iter=faces.<span class="built_in">begin</span>();iter!=faces.<span class="built_in">end</span>();iter++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">rectangle</span>(a,*iter,<span class="built_in">Scalar</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>,<span class="number">8</span>); <span class="comment">//画出脸部矩形</span></span><br><span class="line">    &#125;</span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;hello&quot;</span>,a);</span><br><span class="line">    cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>第二次队列（补充老师框架版）</title>
    <url>/2021/04/25/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%98%9F%E5%88%97%EF%BC%88%E8%A1%A5%E5%85%85%E8%80%81%E5%B8%88%E6%A1%86%E6%9E%B6%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//程序功能：链队列元素排序(队列至少2个数据元素)</span></span><br><span class="line"><span class="comment">//作者:</span></span><br><span class="line"><span class="comment">//日期：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//预处理命令</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数据（结构）类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> year;</span><br><span class="line">	<span class="keyword">int</span> month;</span><br><span class="line">	<span class="keyword">int</span> day;</span><br><span class="line">&#125;Date;<span class="comment">//定义日期数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">char</span> sex[<span class="number">4</span>];</span><br><span class="line">	Date birthday;</span><br><span class="line">&#125; QElemType;<span class="comment">//定义队列元素类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span></span><br><span class="line">	QElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;QNode, * QueuePtr;<span class="comment">//定义队结点、队指针类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	QueuePtr front;</span><br><span class="line">	QueuePtr rear;</span><br><span class="line">&#125; LinkQueue;<span class="comment">//定义链队列数据类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------- 01 建立一个空队列-------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue&amp; Q)</span> </span>&#123;</span><br><span class="line">	Q.front = <span class="literal">NULL</span>;</span><br><span class="line">	Q.rear = Q.front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------- 02 比较两个结点中日期（结构）数据的大小-------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(QElemType a, QElemType b)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//a的日期小，函数返回-1，a、b相等，函数返回0，否则，返回1</span></span><br><span class="line">	<span class="keyword">if</span> (a.birthday.year &gt; b.birthday.year)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (a.birthday.year &lt; b.birthday.year)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">if</span> (a.birthday.month &gt; b.birthday.month)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a.birthday.month &lt; b.birthday.month)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">if</span> (a.birthday.day &gt; b.birthday.day)</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (a.birthday.day &lt; b.birthday.day)</span><br><span class="line">				<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------ 03 进队-------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue&amp; Q, QElemType e)</span> </span>&#123;</span><br><span class="line">	QueuePtr a = (QueuePtr)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(QNode));</span><br><span class="line">	a-&gt;data = e;</span><br><span class="line">	a-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (!Q.rear) &#123;</span><br><span class="line">		Q.front = a;</span><br><span class="line">		Q.rear = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		Q.rear-&gt;next = a;</span><br><span class="line">		Q.rear = Q.rear-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------- 04 出队------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeQueue</span><span class="params">(LinkQueue&amp; Q, QElemType&amp; e)</span> </span>&#123;</span><br><span class="line">	e = Q.front-&gt;data;</span><br><span class="line">	QueuePtr a = Q.front;</span><br><span class="line">	Q.front = Q.front-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------- 05 输出链队列所有元素数据---------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueTraverse</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">	QueuePtr p;</span><br><span class="line"></span><br><span class="line">	p = Q.front;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;姓        名       性  别        出生日期：年       月        日\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (p) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%10s&quot;</span>, p-&gt;data.name);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;          %4s&quot;</span>, p-&gt;data.sex);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;       %10d&quot;</span>, p-&gt;data.birthday.year);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;   %10d&quot;</span>, p-&gt;data.birthday.month);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%10d&quot;</span>, p-&gt;data.birthday.day);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------- 06 建立链队列--------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatLinkQueue</span><span class="params">(LinkQueue&amp; Q, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//建立的队列由Q返回，队列含n个元素</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		QueuePtr a = (QueuePtr)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(QNode));</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">			Q.front = a;</span><br><span class="line">			Q.rear = a;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			Q.rear-&gt;next = a;</span><br><span class="line">			Q.rear = Q.rear-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入姓名\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a-&gt;data.name);</span><br><span class="line">		<span class="built_in">getchar</span>();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入性别\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a-&gt;data.sex);</span><br><span class="line">		<span class="built_in">getchar</span>();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入年月日用空格隔开\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a-&gt;data.birthday.year, &amp;a-&gt;data.birthday.month, &amp;a-&gt;data.birthday.day);</span><br><span class="line">		a-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;创建成功！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------07求队列长度------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Queuelength</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	QueuePtr n = Q.front;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		i++;</span><br><span class="line">		n = n-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------08队列分解-----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">QueueeKploded</span><span class="params">(LinkQueue&amp; Q, LinkQueue&amp; Q1, LinkQueue&amp; Q2)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//已知Q是一个按出生日期升序排序的队列，按性别将其分解为男生(Q1)、女生(Q2)队列,且返回</span></span><br><span class="line">	QueuePtr n = Q.front;</span><br><span class="line">	<span class="keyword">char</span> m[<span class="number">4</span>] = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> flogm = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flogwm = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> wm[<span class="number">4</span>] = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(n-&gt;data.sex, m)==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (flogm == <span class="number">0</span>) &#123;</span><br><span class="line">				flogm++;</span><br><span class="line">				Q1.rear = n;</span><br><span class="line">				Q1.front = Q1.rear;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Q1.rear-&gt;next = n;</span><br><span class="line">				Q1.rear = Q1.rear-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (flogwm == <span class="number">0</span>) &#123;</span><br><span class="line">				flogwm++;</span><br><span class="line">				Q2.rear = n;</span><br><span class="line">				Q2.front = Q2.rear;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Q2.rear-&gt;next = n;</span><br><span class="line">				Q2.rear = Q2.rear-&gt;next;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		n = n-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	Q1.rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	Q2.rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------09队列排序----------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkQueueSort</span><span class="params">(LinkQueue&amp; Q, LinkQueue&amp; sorted)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//将队列Q按出生日期从小到大排序，得到一个有序队列sorted且返回之</span></span><br><span class="line">	LinkQueue TempQ;<span class="comment">//辅助队列</span></span><br><span class="line">	QueuePtr p, q;</span><br><span class="line">	QElemType a, b;</span><br><span class="line">	<span class="keyword">int</span> Qlength;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">InitQueue</span>(TempQ);<span class="comment">//辅助队列初始化  </span></span><br><span class="line">	<span class="built_in">InitQueue</span>(sorted);<span class="comment">//有序队列初始化</span></span><br><span class="line"></span><br><span class="line">	Qlength = <span class="built_in">Queuelength</span>(Q);<span class="comment">//计算Q队列长度</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (Q.front-&gt;next) &#123;  <span class="comment">//1 </span></span><br><span class="line">		<span class="built_in">DeQueue</span>(Q, a);<span class="comment">//Q队列首元出队，其数据置a</span></span><br><span class="line">		Qlength--;</span><br><span class="line">	&#125;<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (Qlength) &#123;<span class="comment">//4  Q队列不空</span></span><br><span class="line"></span><br><span class="line">	  <span class="built_in">InitQueue</span>(TempQ);<span class="comment">//辅助队列初始化  </span></span><br><span class="line">	<span class="built_in">InitQueue</span>(sorted);<span class="comment">//有序队列初始化</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (Q.front-&gt;next) &#123;<span class="comment">//3 从Q队列中找出生日期最小的结点</span></span><br><span class="line">			<span class="built_in">DeQueue</span>(Q, b); <span class="comment">//Q队列新的首元出队，其数据置b		</span></span><br><span class="line">			Qlength--;;</span><br><span class="line"></span><br><span class="line">			<span class="built_in"><span class="keyword">switch</span></span> (<span class="built_in">cmp</span>(a, b)) &#123;<span class="comment">//2</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">-1</span>:<span class="comment">//b的日期大</span></span><br><span class="line">				<span class="built_in">EnQueue</span>(TempQ, b);<span class="comment">//b元素进辅助队列</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//a、b日期相等，</span></span><br><span class="line">				<span class="built_in">EnQueue</span>(TempQ, b);<span class="comment">//按在Q队列出现的先后，b元素进辅助队列</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//a的日期大</span></span><br><span class="line">				<span class="built_in">EnQueue</span>(TempQ, a);<span class="comment">//a元素进辅助队列</span></span><br><span class="line">				a = b;<span class="comment">//将a更新为b，以便下一次比较</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;<span class="comment">//2</span></span><br><span class="line">		&#125;<span class="comment">//3</span></span><br><span class="line">		<span class="built_in">EnQueue</span>(sorted, a);<span class="comment">//a是Q队列的最小元素，进sorted队列，此时Q队列已空</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (TempQ.front) &#123;<span class="comment">//5 将TempQ辅助队列所有元素按先后出队，且进入Q队列</span></span><br><span class="line">			<span class="built_in">DeQueue</span>(TempQ, a);</span><br><span class="line">			<span class="built_in">EnQueue</span>(Q, a);</span><br><span class="line">		&#125;<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">		Qlength = <span class="built_in">Queuelength</span>(Q);<span class="comment">//重新计算Q队列长度</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Qlength &gt;= <span class="number">2</span>) &#123;<span class="comment">//Q队列长度大于等于2，则首元出队，其数据置a</span></span><br><span class="line">			<span class="built_in">DeQueue</span>(Q, a);</span><br><span class="line">			Qlength--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (Qlength == <span class="number">1</span>) &#123;<span class="comment">//Q队列长度等于1，则最后一个结点出队，其数据置入a，将其数据直接进入sorted队列</span></span><br><span class="line">			<span class="built_in">DeQueue</span>(Q, a);</span><br><span class="line">			<span class="built_in">EnQueue</span>(sorted, a);</span><br><span class="line">			Qlength--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">EnQueue</span>(sorted, a);<span class="comment">//此时Q队列已空，将a、b比较中剩余的元素</span></span><br><span class="line">							  <span class="comment">//(如果是b，已经将其置入a)进入sorted队列</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="comment">//4</span></span><br><span class="line">	sorted.rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------- 10 系统主控模块-------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//函数功能:将无序队列排序，且按性别分解为男生队列和女生队列</span></span><br><span class="line"></span><br><span class="line">	LinkQueue Que, menqueue, womenqueue, tempQ;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入队列的元素个数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">CreatLinkQueue</span>(Que, num);</span><br><span class="line">	<span class="built_in">QueueTraverse</span>(Que);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">LinkQueueSort</span>(Que, tempQ);<span class="comment">//将队列Que按出生日期排序，以得到有序队列tempQ</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">QueueeKploded</span>(tempQ, menqueue, womenqueue);<span class="comment">//将有序队列tempQ分解为男生队列和女生队列</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;                   *****男生队列*****\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">QueueTraverse</span>(menqueue);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;                     *****女生队列****\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">QueueTraverse</span>(womenqueue);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n朋友，再见!!!\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>老师作业</category>
      </categories>
  </entry>
  <entry>
    <title>计网笔记-导论（持续更新）</title>
    <url>/2021/04/23/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0-%E5%AF%BC%E8%AE%BA%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h1><hr>
<h2 id="什么是互联网？"><a href="#什么是互联网？" class="headerlink" title="什么是互联网？"></a>什么是互联网？</h2><p> 从应用进程的角度来说：互联网就是分布式应用进程和技术设施。</p>
<p> 这里的基础设施向进程提供通信服务，是应用层以下的所有的协议实体。</p>
<p> 分布式进程就是网络存在的理由。</p>
<hr>
<h2 id="计算机网络的层次"><a href="#计算机网络的层次" class="headerlink" title="计算机网络的层次"></a>计算机网络的层次</h2><h3 id="5层结构"><a href="#5层结构" class="headerlink" title="5层结构"></a>5层结构</h3><p> <strong>应用层</strong></p>
<p> <strong>传输层</strong></p>
<p> <strong>网络层</strong></p>
<p><strong>数据链路层</strong></p>
<p> <strong>物理层</strong></p>
<p>//物理层之下还有媒体，属于第0层。</p>
<hr>
<p> 物理层在媒体层的基础之上接收光信号，电磁波等信号进行转义。</p>
<p> 数据链路层是在物理层的基础之上完成点对点的传输，例如交换机与交换机之间。</p>
<p> 网络层是在链路层的基础之上实现的端对端的传输。传输并不可靠。</p>
<p> 传输层是在网络层的基础之上对网络层的加强和细分，从而实现了进程到进程的传输，并使传输变得可靠。</p>
<p> 应用层是在进程到进程（传输层）的基础上完成报文的交换。</p>
<hr>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网笔记-应用层</title>
    <url>/2021/04/23/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0-%E5%BA%94%E7%94%A8%E5%B1%82/</url>
    <content><![CDATA[<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><hr>
<h4 id="进程的划分"><a href="#进程的划分" class="headerlink" title="进程的划分"></a>进程的划分</h4><p>发起通讯的进程为客户，会话开始是等待联系的进程是服务器。</p>
<hr>
<h4 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h4><p>同一台主机内应用层到运输层的接口。（应用程序编程的接口）。</p>
<p>应用通过自己的端口号（port number）定位接收的进程。</p>
<hr>
<h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><p>定义的内容：</p>
<p>①交换的报文类型，例如请求报文和响应报文。</p>
<p>②各种报文类型的语法，例如报文中的各个字段及这些字段是如何描述的。</p>
<p>③字段的语义，字段中的信息的含义。</p>
<p>④确定一个进程何时及如何发送报文，对报文的响应规则。</p>
<p>其中对报文响应的规则是由RFC文档定义的（协议的一部分）,公用RFC是由IETF网站公布。但也可以自己定义专用的文档。、、</p>
<p>注：应用层协议分为公用和私人两种，公司可根据需求自己写自己的RFC文档。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网笔记-运输层</title>
    <url>/2021/04/25/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0-%E8%BF%90%E8%BE%93%E5%B1%82/</url>
    <content><![CDATA[<h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><hr>
<h2 id="运输层协议"><a href="#运输层协议" class="headerlink" title="运输层协议"></a>运输层协议</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>①能提供进程到进程的可靠地数据传输（reliable data transfer）</p>
<p>②提供确保的吞吐量。（bps r比特/秒）</p>
<p>③定时保障</p>
<p>④安全性</p>
<hr>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>①面向连接的服务。</p>
<p>在报文流动前交换运输层的控制信息。</p>
<p>握手后，TCP连接就在两个进程的套接字之间建立完成。</p>
<p>结束后必须拆除TCP连接。</p>
<p>②可靠地数据传输。</p>
<p>③拥塞控制机制。</p>
<h3 id="SSL（加密版的TCP）"><a href="#SSL（加密版的TCP）" class="headerlink" title="SSL（加密版的TCP）"></a>SSL（加密版的TCP）</h3><hr>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>①轻量级的运输协议。</p>
<p>②无连接的服务。</p>
<p>③不可靠但快速，无握手过程。</p>
<p>④无拥塞机制。</p>
<p>⑤许多防火墙会阻拦UDP流量。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>链表C语言</title>
    <url>/2021/04/07/%E9%93%BE%E8%A1%A8C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="链表C语言版本（简陋版3-0）"><a href="#链表C语言版本（简陋版3-0）" class="headerlink" title="链表C语言版本（简陋版3.0）"></a>链表C语言版本（简陋版3.0）</h1><hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">a</span> &#123;</span><span class="comment">//链表的节点</span></span><br><span class="line">	<span class="keyword">char</span> ch[<span class="number">3</span>];<span class="comment">//链表节点的数据</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">a</span>* <span class="title">next</span>;</span><span class="comment">//next指针</span></span><br><span class="line">&#125;zi;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">est</span><span class="params">(zi *p,<span class="keyword">char</span> *c)</span> </span>&#123;<span class="comment">//生成链表</span></span><br><span class="line">	zi* a = (zi*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(zi));<span class="comment">//动态申请空间</span></span><br><span class="line">	p-&gt;next = a;<span class="comment">//让结尾节点指向新生成的节点</span></span><br><span class="line">	p = p-&gt;next;<span class="comment">//让p指向下一个也就是新生成的节点</span></span><br><span class="line">	p-&gt;next = <span class="literal">NULL</span>;<span class="comment">//让最后一个节点指向空</span></span><br><span class="line">	<span class="built_in">strcpy</span>(p-&gt;ch, c);<span class="comment">//把数据储存进新节点中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dele</span><span class="params">(zi* head)</span> </span>&#123;<span class="comment">//清空链表函数</span></span><br><span class="line">	zi* p = head-&gt;next;<span class="comment">//让p指向head的下一位（head不是分配的动态内存是局部变量不用free）</span></span><br><span class="line">	zi* a;<span class="comment">//第二个指针</span></span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next)<span class="comment">//循环直到p-&gt;next为null结束</span></span><br><span class="line">	&#123;   </span><br><span class="line">		a = p;<span class="comment">//备份p用来free</span></span><br><span class="line">		p = p-&gt;next;<span class="comment">//让p指向下一位</span></span><br><span class="line">		<span class="built_in">free</span>(a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(zi *head, <span class="keyword">char</span>* c)</span> </span>&#123;<span class="comment">//查找函数</span></span><br><span class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>;<span class="comment">//定位位置</span></span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">0</span>;<span class="comment">//是否查找到的标记</span></span><br><span class="line">	zi* q = head;</span><br><span class="line">	<span class="keyword">while</span>(q-&gt;next)&#123;</span><br><span class="line">		sum++;</span><br><span class="line">		q = q-&gt;next;<span class="comment">//让q指向下一位</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(q-&gt;ch, c) == <span class="number">0</span>) &#123;<span class="comment">//判断是否是查找的选项</span></span><br><span class="line">			flag = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> sum;<span class="comment">//找到了返回位置</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//没找到返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(zi* head, <span class="keyword">char</span>* c, <span class="keyword">int</span> z)</span> </span>&#123;<span class="comment">//添加函数</span></span><br><span class="line">	zi* front=head;<span class="comment">//front之后会指向z前一个节点</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; z<span class="number">-1</span>; i++)<span class="comment">//循环到z前</span></span><br><span class="line">	&#123;</span><br><span class="line">		front = front-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	zi* back=front-&gt;next;<span class="comment">//备份front后一个节点，新节点会插入2者之间</span></span><br><span class="line">	est(front, c);<span class="comment">//调用新建函数新建指针</span></span><br><span class="line">	front-&gt;next-&gt;next = back;<span class="comment">//front-&gt;next就是新节点，让其接上back节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(zi* head, <span class="keyword">char</span>* c)</span> </span>&#123;<span class="comment">//删除节点</span></span><br><span class="line">	<span class="keyword">int</span> z = find(head, c);<span class="comment">//找到删除数据的位置</span></span><br><span class="line">	<span class="keyword">if</span> (z == <span class="number">-1</span>) &#123;<span class="comment">//-1代表未找到</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;未找到匹配字符!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		zi* front = head;<span class="comment">//备份前一个和后后一个，删除二者之间的节点</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; z<span class="number">-1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			front = front-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		zi* m = front-&gt;next;<span class="comment">//m是要删除的节点</span></span><br><span class="line">		zi* back = m-&gt;next;<span class="comment">//删除节点后的节点</span></span><br><span class="line">		front-&gt;next = back;<span class="comment">//重新连接节点</span></span><br><span class="line">		<span class="built_in">free</span>(m);<span class="comment">//释放m</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pri</span><span class="params">(zi* head)</span> </span>&#123;<span class="comment">//打印函数</span></span><br><span class="line">	zi *p = head;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, p-&gt;ch);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;<span class="comment">//主函数简单备注不用了</span></span><br><span class="line">	<span class="keyword">int</span> z;</span><br><span class="line">	<span class="keyword">char</span> ch[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">char</span> c[<span class="number">3</span>];</span><br><span class="line">	zi head = &#123; &#123;<span class="string">&#x27;s&#x27;</span>&#125;,<span class="literal">NULL</span> &#125;;</span><br><span class="line">	zi* p = &amp;head;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入8个字（每个词之间空一格，E表示结束）\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">strcmp</span>(<span class="string">&quot;E&quot;</span>,c)!=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		est(p, c);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、查找     2、删除\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、添加     4、输出\n&quot;</span>);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">switch</span> (n) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入查找的汉字\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch);</span><br><span class="line">		<span class="keyword">if</span> (find(&amp;head, ch) == <span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;输入的汉字未查找到\n&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;输入的汉字在第%d位&quot;</span>, find(&amp;head, ch));</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入需要删除的汉字\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch);</span><br><span class="line">		out(&amp;head, ch);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除后的结果\n&quot;</span>);</span><br><span class="line">		pri(&amp;head);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入需要添加的汉字\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入需要添加的位次\n&quot;</span>);</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;z);</span><br><span class="line">		in(&amp;head, ch, z);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;插入后的结果为\n&quot;</span>);</span><br><span class="line">		pri(&amp;head);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		pri(&amp;head);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入错误\n&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	dele(&amp;head);<span class="comment">//删除除了head以外的所有节点</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>void est(zi *p,char *c)</code>函数实现了链表的创建。第一个参数表示最后一个节点的指针，第二个参数是需要存入的数据。</p>
<p><code>void dele(zi* head)</code>函数实现了链表的清空，参数为头结点。</p>
<p><code>int find(zi *head, char* c)</code>函数实现了链表的查找，第一个参数，是头结点，第二参数是需要查找的值。同理此函数可以拓展改写为查第n个元素的值。</p>
<p><code>void in(zi* head, char* c, int z)</code>函数实现了链表的插入，第一个参数是头结点，第二个参数是需要插入结点数据的值，第三个参数是插入到第几个元素之后的位次。</p>
<p><code>void out(zi* head, char* c)</code>函数实现了链表的删除，第一个参数是头结点，第二个参数是删除的数据是什么。此函数可以改写拓展为删除第n个元素。</p>
<p><code>void pri(zi* head)</code>函数实现了打印整个链表。第一个参数为头结点。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>队列（C语言版）</title>
    <url>/2021/04/25/%E9%98%9F%E5%88%97%EF%BC%88C%E8%AF%AD%E8%A8%80%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此代码的读取需在在.c的文件目录下保存一个以ASNI形式保存的date.txt文件。用于数据的初始化，数据的格式例子如下：</p>
<p>5</p>
<p>李文 女 2001 02 03</p>
<p>王杰文 男 2001 05 06</p>
<p>周浩 男 1999 11 2</p>
<p>钱倩倩 女 2000 3 5</p>
<p>孙杰  男 2000 3 20</p>
<p>第一行为数据数量<br>之后的每行为姓名 性别 年月日。</p>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> false -1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> year;</span><br><span class="line">	<span class="keyword">int</span> month;</span><br><span class="line">	<span class="keyword">int</span> day;</span><br><span class="line">&#125;node1;<span class="comment">//生日</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">char</span> sex[<span class="number">4</span>];</span><br><span class="line">	node1 birthday;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;node;<span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	node* front;</span><br><span class="line">	node* back;</span><br><span class="line">&#125;queue;<span class="comment">//队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------- 01 建立一个空队列-------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">new_node</span><span class="params">(queue *q)</span> </span>&#123;<span class="comment">//创建新的节点</span></span><br><span class="line">	node* a = (node*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(node));<span class="comment">//分配内存</span></span><br><span class="line">	a-&gt;next = <span class="literal">NULL</span>;<span class="comment">//新节点的next指向空</span></span><br><span class="line">	<span class="keyword">if</span> (!q-&gt;front ) &#123;<span class="comment">//头为空</span></span><br><span class="line">		q-&gt;front = a;</span><br><span class="line">		q-&gt;back = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		q-&gt;back-&gt;next = a;<span class="comment">//队尾指针的next指向新的节点</span></span><br><span class="line">		q-&gt;back = q-&gt;back-&gt;next;<span class="comment">//队尾指针后移</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------ 02 进队-------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newpush_back</span><span class="params">(queue* q)</span> </span>&#123;<span class="comment">//新建节点</span></span><br><span class="line">	<span class="built_in">new_node</span>(q);<span class="comment">//创建节点</span></span><br><span class="line">	<span class="keyword">if</span> (!q-&gt;back) &#123;<span class="comment">//如果队尾没有被分配上空间，失败</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;空间不足创建失败!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入姓名\n&quot;</span>);<span class="comment">//填入数据</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, q-&gt;back-&gt;name);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入性别\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, q-&gt;back-&gt;sex);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入年月日用空格隔开\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;q-&gt;back-&gt;birthday.year, &amp;q-&gt;back-&gt;birthday.month, &amp;q-&gt;back-&gt;birthday.day);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;创建成功！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(queue* q, node* b)</span> </span>&#123;<span class="comment">//添加节点，数据为b</span></span><br><span class="line">	<span class="keyword">if</span> (!q-&gt;front)<span class="comment">//头为空，表示这是第一个节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		q-&gt;front = b;<span class="comment">//队头和队尾指向新的节点</span></span><br><span class="line">		q-&gt;back = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//头不为空</span></span><br><span class="line">	&#123;</span><br><span class="line">		q-&gt;back-&gt;next = b;<span class="comment">//队尾节点next指向新的节点</span></span><br><span class="line">		q-&gt;back = q-&gt;back-&gt;next;<span class="comment">//队尾后移</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------- 03 出队------------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(queue* q)</span> </span>&#123;<span class="comment">//删除节点</span></span><br><span class="line">	<span class="keyword">if</span> (!q-&gt;front) &#123;<span class="comment">//头为空表示没元素</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无元素出队失败!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	node* a = q-&gt;front;<span class="comment">//备份队头</span></span><br><span class="line">	q-&gt;front = q-&gt;front-&gt;next;<span class="comment">//让队头后移</span></span><br><span class="line">	<span class="built_in">free</span>(a);<span class="comment">//释放内存</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_pop</span><span class="params">(queue* q, node* b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!q-&gt;front) &#123;<span class="comment">//头为空表示没元素</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无元素出队失败!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	b = q-&gt;front;<span class="comment">//数据导出</span></span><br><span class="line">	b-&gt;next = <span class="literal">NULL</span>;<span class="comment">//让b脱离队列</span></span><br><span class="line">	q-&gt;front = q-&gt;front-&gt;next;<span class="comment">//让队头后移</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------- 04 比较两个结点中日期（结构）数据的大小-------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//a的日期小，函数返回-1，a、b相等，函数返回0，否则，返回1</span></span><br><span class="line">	<span class="keyword">if</span> (a.birthday.year == b.birthday.year &amp;&amp; a.birthday.month == b.birthday.month &amp;&amp; a.birthday.day == b.birthday.day)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (a.birthday.year &lt; b.birthday.year ||</span><br><span class="line">		(a.birthday.year == b.birthday.year &amp;&amp; a.birthday.month &lt; b.birthday.month) || (</span><br><span class="line">			a.birthday.year == b.birthday.year &amp;&amp; a.birthday.month == b.birthday.month &amp;&amp; a.birthday.day &lt; b.birthday.day))</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------- 06 建立链队列--------------</span></span><br><span class="line"><span class="comment">void Creatqueue(queue&amp; Q, int n) &#123;</span></span><br><span class="line"><span class="comment">	int i=0;</span></span><br><span class="line"><span class="comment">	while(i&lt;n)&#123;</span></span><br><span class="line"><span class="comment">		if(i==0)&#123;</span></span><br><span class="line"><span class="comment">		new_node(&amp;Q.front);</span></span><br><span class="line"><span class="comment">		Q.back=Q.front;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		else</span></span><br><span class="line"><span class="comment">		new_node(&amp;Q.back)</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	&#125;建立的队列由Q返回，队列含n个元素</span></span><br><span class="line"><span class="comment">我的实现方式是不用提前告知队列元素个数，而是一个个加入实时变长。通过文件中的date.txt文件读入。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(queue* q)</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">	FILE* f;<span class="comment">//文件指针</span></span><br><span class="line">	f = <span class="built_in">fopen</span>(<span class="string">&quot;date.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);<span class="comment">//以只读打开date.txt</span></span><br><span class="line">	<span class="comment">/*date.txt 文件的内容</span></span><br><span class="line"><span class="comment">	* 5</span></span><br><span class="line"><span class="comment">      李文 女 2001 02 03</span></span><br><span class="line"><span class="comment">      王杰文 男 2001 05 06</span></span><br><span class="line"><span class="comment">      周浩 男 1999 11 2</span></span><br><span class="line"><span class="comment">      钱倩倩 女 2000 3 5</span></span><br><span class="line"><span class="comment">      孙杰  男 2000 3 20</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">fscanf</span>(f, <span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//读入第一行的数，此数表示文件中的数据个数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">new_node</span>(q);<span class="comment">//创建节点</span></span><br><span class="line">		<span class="built_in">fscanf</span>(f, <span class="string">&quot;%s %s %d %d %d&quot;</span>, q-&gt;back-&gt;name, q-&gt;back-&gt;sex, &amp;q-&gt;back-&gt;birthday.year, &amp;q-&gt;back-&gt;birthday.month, &amp;q-&gt;back-&gt;birthday.day);</span><br><span class="line">		<span class="comment">//读入数据</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fclose</span>(f);<span class="comment">//关闭指针</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;初始化成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------07求队列长度------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(queue* q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	node* n = q-&gt;front;<span class="comment">//备份头节点，因为不想改变队列的头节点指针</span></span><br><span class="line">	<span class="keyword">while</span> (n) &#123;<span class="comment">//n为空时结束</span></span><br><span class="line">		sum++;<span class="comment">//每次sum++</span></span><br><span class="line">		n = n-&gt;next;<span class="comment">//n指向下一个</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">QueueeKploded</span><span class="params">(queue* q, queue* man, queue* woman)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//已知Q是一个按出生日期升序排序的队列，按性别将其分解为男生(Q1)、女生(Q2)队列,且返回</span></span><br><span class="line">	node* n = q-&gt;front;<span class="comment">//备份头节点</span></span><br><span class="line">	<span class="keyword">char</span> m[<span class="number">4</span>] = <span class="string">&quot;男&quot;</span>;<span class="comment">//定义m方便比较</span></span><br><span class="line">	<span class="keyword">int</span> flogm = <span class="number">0</span>;<span class="comment">//男女的数量标记，第一次时</span></span><br><span class="line">	<span class="keyword">int</span> flogwm = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;<span class="comment">//循环整个队列</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(n-&gt;sex, m) == <span class="number">0</span>)<span class="comment">//对比是否为男生</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">push_back</span>(man, n);<span class="comment">//把此节点放入man中</span></span><br><span class="line">			n = n-&gt;next;<span class="comment">//n后移</span></span><br><span class="line">			man-&gt;back-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span><span class="comment">//不是男就放入女生队列</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">push_back</span>(woman, n);</span><br><span class="line">			n = n-&gt;next;</span><br><span class="line">			woman-&gt;back-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------09队列排序----------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queueSort</span><span class="params">(queue* q, queue* qsort)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//将队列Q按出生日期从小到大排序</span></span><br><span class="line">	node* a = q-&gt;front, * b = q-&gt;front-&gt;next, * af, * bf;</span><br><span class="line">	<span class="comment">//备份头结点和尾节点，af，bf为两者的前一个节点，af,bf方便删除节点</span></span><br><span class="line">	<span class="keyword">int</span> l = <span class="built_in">length</span>(q);<span class="comment">//队列长度</span></span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l - <span class="number">1</span>; i++) &#123;<span class="comment">//循环整个队列，只剩2个节点时退出</span></span><br><span class="line">		a = q-&gt;front;<span class="comment">//初始化啊，a,b,af,bf</span></span><br><span class="line">		b = q-&gt;front-&gt;next;</span><br><span class="line">		af = a;</span><br><span class="line">		bf = a;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; l - i - <span class="number">1</span>; j++)<span class="comment">//遍历一遍队列找出最小的节点</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">cmp</span>(*b, *a) == <span class="number">-1</span>) &#123;<span class="comment">//如果b比a小</span></span><br><span class="line">				a = b;<span class="comment">//让a等于最小的</span></span><br><span class="line">				af = bf;<span class="comment">//af等于bf</span></span><br><span class="line">			&#125;</span><br><span class="line">			b = b-&gt;next;<span class="comment">//b和bf继续后移</span></span><br><span class="line">			bf = bf-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">push_back</span>(qsort, a);<span class="comment">//a此时是q中最小的节点放入qsort中</span></span><br><span class="line">		af-&gt;next = a-&gt;next;<span class="comment">//q中删除a节点</span></span><br><span class="line">	&#125;</span><br><span class="line">	af = a-&gt;next;<span class="comment">//将剩下的节点放入qsort中,a为front指针的备份所以让af等于他的下一个节点</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">cmp</span>(*af, *a) == <span class="number">-1</span>) &#123;<span class="comment">//比较两者并加入qsort队列</span></span><br><span class="line">		<span class="built_in">push_back</span>(qsort, af);</span><br><span class="line">		<span class="built_in">push_back</span>(qsort, a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">push_back</span>(qsort, a);</span><br><span class="line">		<span class="built_in">push_back</span>(qsort, af);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------- 04 输出链队列所有元素数据---------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pri</span><span class="params">(queue* Q)</span> </span>&#123;</span><br><span class="line">	node* p;</span><br><span class="line"></span><br><span class="line">	p = Q-&gt;front;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;姓        名       性  别        出生日期：年       月        日\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (p) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%10s&quot;</span>, p-&gt;name);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;          %4s&quot;</span>, p-&gt;sex);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;       %10d&quot;</span>, p-&gt;birthday.year);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;   %10d&quot;</span>, p-&gt;birthday.month);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%10d&quot;</span>, p-&gt;birthday.day);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(queue* a)</span> </span>&#123;<span class="comment">//清空队列</span></span><br><span class="line">	node* b;</span><br><span class="line">	<span class="keyword">while</span> (a-&gt;front) &#123;</span><br><span class="line">		b = a-&gt;front;</span><br><span class="line">		a-&gt;front = a-&gt;front-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------- 10 系统主控模块-------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//函数功能:将无序队列排序，且按性别分解为男生队列和女生队列</span></span><br><span class="line">	queue q=&#123; <span class="literal">NULL</span>,<span class="literal">NULL</span> &#125;, qsort = &#123; <span class="literal">NULL</span>,<span class="literal">NULL</span> &#125;, man = &#123; <span class="literal">NULL</span>,<span class="literal">NULL</span> &#125;, woman = &#123;<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">f</span>(&amp;q);</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请选择：\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;1.输出整个队列    2.排序队列\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;3.添加新元素      4.删除队头元素\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;5.再次初始化      6.男女分开\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;7.结束\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">		<span class="built_in"><span class="keyword">switch</span></span> (a)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="built_in">pri</span>(&amp;q);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="built_in">queueSort</span>(&amp;q, &amp;qsort);</span><br><span class="line">			q = qsort;</span><br><span class="line">			<span class="built_in">pri</span>(&amp;q);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="built_in">newpush_back</span>(&amp;q);</span><br><span class="line">			<span class="built_in">pri</span>(&amp;q);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="built_in">pop</span>(&amp;q);</span><br><span class="line">			<span class="built_in">pri</span>(&amp;q);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			<span class="built_in">f</span>(&amp;q);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			<span class="built_in">QueueeKploded</span>(&amp;q, &amp;man, &amp;woman);</span><br><span class="line">			<span class="built_in">pri</span>(&amp;man);</span><br><span class="line">			<span class="built_in">pri</span>(&amp;woman);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">getchar</span>();</span><br><span class="line">	&#125; <span class="keyword">while</span> (a != <span class="number">7</span>);</span><br><span class="line">	<span class="built_in">clear</span>(&amp;q);<span class="comment">//结束时清空队列，因为节点时动态内存分配的</span></span><br><span class="line">	<span class="built_in">clear</span>(&amp;qsort);</span><br><span class="line">	<span class="built_in">clear</span>(&amp;woman);</span><br><span class="line">	<span class="built_in">clear</span>(&amp;man);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>老师作业</category>
      </categories>
  </entry>
</search>
